import random

import sqlalchemy.exc
import telebot
from telebot import types
import os
from sqlalchemy import create_engine, Column, String, Integer
from sqlalchemy.orm import sessionmaker, declarative_base

Base = declarative_base()


class Joke(Base):
    __tablename__ = "jokes"
    id = Column("id", Integer, primary_key=True, autoincrement=True)
    content = Column("content", String, nullable=False)
    rating = Column("rating", Integer, nullable=False)

    def __init__(self, content, rating=0):
        self.content = content
        self.rating = rating

    def __repr__(self):
        return f"Joke ‚Ññ{self.id}: {self.content}"


engine = create_engine("sqlite:///database.db")
Base.metadata.create_all(bind=engine)
Session = sessionmaker(bind=engine)
session = Session()

API_KEY = os.environ["API_KEY"]
bot = telebot.TeleBot(API_KEY)

admin_id = (1147111861,)


def is_admin(uid):
    if uid in admin_id:
        return True


def for_admin(func):
    def wrapper(*args):
        message = args[0]
        if type(message) == telebot.types.Message:
            if message.from_user.id in admin_id:
                func(message)
            else:
                bot.send_message(message.chat.id, "–¶—è –∫–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        else:
            raise ValueError(f"Invalid arg type. Got: {type(message)}, expected: {telebot.types.Message}")

    return wrapper


@bot.message_handler(commands=["start"])
def start(message):
    message_to_send = f"–í—ñ—Ç–∞—é {message.from_user.first_name}!\n" \
                      f"–ù–∞—Å—Ç–∞–≤ —á–∞—Å —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö –∂–∞—Ä—Ç—ñ–≤.\n" \
                      f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /next_joke —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∂–∞—Ä—Ç.\n" \
                      f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /add_joke —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∂–∞—Ä—Ç(–¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤).\n"
    bot.send_message(message.chat.id, f"{message_to_send}")


@bot.message_handler(commands=["next_joke"])
def next_joke(message):
    if len(session.query(Joke).all()):
        joke = random.choices(session.query(Joke).all(), cum_weights=[joke[0] for joke in session.query(Joke.id).all()])[0]
        markup = types.InlineKeyboardMarkup(row_width=1)
        rate_button = types.InlineKeyboardButton("–û—Ü—ñ–Ω–∏—Ç–∏ –∂–∞—Ä—ÇüíØ", callback_data=f"rate_joke*{joke.id}")
        edit_button = types.InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∂–∞—Ä—Çüõ†", callback_data=f"edit_joke*{joke.id}")
        delete_button = types.InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –∂–∞—Ä—Ç‚ö∞", callback_data=f"delete_joke*{joke.id}")
        markup.add(rate_button, edit_button, delete_button)
        bot.send_message(message.chat.id, f"–ñ–∞—Ä—Ç ‚Ññ{joke.id}\n" + joke.content, reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         "–ù–∞ –∂–∞–ª—å –∂–∞—Ä—Ç—ñ–≤ –Ω–µ —ñ—Å–Ω—É—î, –π–¥–∏ –ø–æ–ø–ª–∞—á –∞–±–æ —Å–∫–∞–∂–∏ –∞–¥–º—ñ–Ω—É –Ω–µ—Ö–∞–π –¥–æ–¥–∞—Å—Ç—å –Ω–æ–≤–∏–π –∂–∞—Ä—Ç!")


@bot.callback_query_handler(func=lambda call: True)
def change_joke(call):
    data = call.data.split("*")[0]
    try:
        joke_to_edit = session.query(Joke).filter(Joke.id == int(call.data.split("*")[-1])).one()
        if data == "rate_joke":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –æ—Ü—ñ–Ω–∫—É(–í—ñ–¥ 0 –¥–æ 10):")
            bot.register_next_step_handler(call.message, rate_joke, joke_to_edit)
        elif data == "edit_joke":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ü—å–æ–≥–æ –∂–∞—Ä—Ç—É:")
            bot.register_next_step_handler(call.message, edit_content_joke, joke_to_edit)
        elif data == "delete_joke":
            delete_joke(joke_to_edit)
            bot.send_message(call.message.chat.id, "–ñ–∞—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    except sqlalchemy.exc.NoResultFound:
        bot.send_message(call.message.chat.id,
                         "–ñ–∞—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ —Ç–∞–∫–∏–π –∂–∞—Ä—Ç –±—É–ª–æ —â–æ–π–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –í–∞–º–∏ –∞–±–æ —ñ–Ω—à–∏–º –∞–¥–º—ñ–Ω–æ–º?")


def rate_joke(message, joke_to_rate):
    try:
        user_rating = int(message.text)
        if user_rating in range(0, 11):
            joke_to_rate.rating = user_rating
            session.commit()
            bot.send_message(message.chat.id, "–û—Ü—ñ–Ω–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!\n"
                                              "–ñ–∞—Ä—Ç–∏ –∑ –º–µ–Ω—à–Ω–æ—é –æ—Ü—ñ–Ω–∫–æ—é –±—É–¥—É—Ç—å –≤–∏–ø–∞–¥–∞—Ç–∏ –í–∞–º —Ä—ñ–¥—à–µ")
        else:
            bot.send_message(message.chat.id, "–û—Ü—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º –≤—ñ–¥ 0 –¥–æ 10. –í–≤–µ–¥—ñ—Ç—å –æ—Ü—ñ–Ω–∫—É –∑–Ω–æ–≤—É:")
            bot.register_next_step_handler(message, rate_joke, joke_to_rate)
    except ValueError:
        bot.send_message(message.chat.id, "–û—Ü—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º –≤—ñ–¥ 0 –¥–æ 10. –í–≤–µ–¥—ñ—Ç—å –æ—Ü—ñ–Ω–∫—É –∑–Ω–æ–≤—É:")
        bot.register_next_step_handler(message, rate_joke, joke_to_rate)


def edit_content_joke(message, joke_to_rate):
    joke_to_rate.content = message.text
    session.commit()
    bot.send_message(message.chat.id, "–ñ–∞—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!")


def delete_joke(joke_to_edit):
    session.delete(joke_to_edit)
    session.commit()


@bot.message_handler(commands=["add_joke"])
@for_admin
def add_joke(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∂–∞—Ä—Ç:")
    bot.register_next_step_handler(message, add_joke_to_db)


def add_joke_to_db(message):
    joke = Joke(content=message.text)
    session.add(joke)
    session.commit()

    bot.reply_to(message, "–ñ–∞—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")


bot.polling(none_stop=True)
