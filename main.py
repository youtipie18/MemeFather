import random

import sqlalchemy.exc
import telebot
from telebot import types
import os
from sqlalchemy import create_engine, Column, String, Integer
from sqlalchemy.orm import sessionmaker, declarative_base

Base = declarative_base()


class Joke(Base):
    __tablename__ = "joke"
    joke_id = Column("joke_id", Integer, primary_key=True, autoincrement=True)
    content = Column("content", String, nullable=False)
    rating = Column("rating", Integer, nullable=False, default=0)

    def __repr__(self):
        return f"Joke ‚Ññ{self.id}: {self.content}"


class User(Base):
    __tablename__ = "user"
    user_id = Column("user_id", Integer, primary_key=True)
    admin_status = Column("is_admin", String, nullable=False, default="None")
    full_name = Column("full_name", String, nullable=False)

    def __init__(self, user_id, full_name):
        self.user_id = user_id
        self.full_name = full_name

    def __repr__(self):
        return f"User ‚Ññ{self.user_id}"


engine = create_engine("sqlite:///database.db")
Base.metadata.create_all(bind=engine)
Session = sessionmaker(bind=engine)
session = Session()

API_KEY = os.environ["API_KEY"]
bot = telebot.TeleBot(API_KEY)


def is_admin(uid, admin_type="all"):
    return session.query(User).filter(User.user_id == uid).one().admin_status in \
           ["Admin", "MAIN_ADMIN"] if admin_type == "all" else admin_type


def for_admin(func):
    def wrapper(*args):
        message = args[0]
        if type(message) == telebot.types.Message:
            if is_admin(message.from_user.id):
                func(message)
            else:
                bot.send_message(message.chat.id, "–¶—è –∫–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.\n"
                                                  "–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –±—É—Ç–∏ –∞–¥–º—ñ–Ω–æ–º, —Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /send_admin_request")
        else:
            raise ValueError(f"Invalid arg type. Got: {type(message)}, expected: {telebot.types.Message}")

    return wrapper


def for_main_admin(func):
    def wrapper(*args):
        message = args[0]
        if type(message) == telebot.types.Message:
            if is_admin(message.from_user.id, admin_type="MAIN_ADMIN"):
                func(message)
            else:
                bot.send_message(message.chat.id, "–¶—è –∫–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞.\n"
                                                  "–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ —ñ–Ω–∏–º –≥–æ–ª–æ–≤–Ω–∏–º –∞–¥–º—ñ–Ω–æ–º, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É.")
        else:
            raise ValueError(f"Invalid arg type. Got: {type(message)}, expected: {telebot.types.Message}")

    return wrapper


@bot.message_handler(commands=["start"])
def start(message):
    user = User(message.from_user.id, f"{message.from_user.first_name} {message.from_user.last_name}")
    if not session.query(User).filter(User.user_id == message.from_user.id).scalar():
        session.add(user)
        session.commit()
    else:
        print("User already registered. Updating their name")
        existing_user = session.query(User).filter(User.user_id == message.from_user.id)
        existing_user.full_name = user.full_name
        session.commit()
    msg = f"–í—ñ—Ç–∞—é {message.from_user.first_name}!\n" \
          f"–ù–∞—Å—Ç–∞–≤ —á–∞—Å —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö –∂–∞—Ä—Ç—ñ–≤.\n" \
          f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /next_joke —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∂–∞—Ä—Ç.\n" \
          f"{'–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /add_joke —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∂–∞—Ä—Ç(–¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤).' if is_admin(message.from_user.id) else ''}\n" \
          f"{'–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /show_requests —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –∞–¥–º—ñ–Ω –ø—Ä–∞–≤–∞.' if is_admin(message.from_user.id, admin_type='MAIN_ADMIN') else ''}\n" \
          f"{'–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /show_admins —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥—ñ–π—Å–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ–≤ .' if is_admin(message.from_user.id, admin_type='MAIN_ADMIN') else ''}"
    bot.send_message(message.chat.id, f"{msg}")


@bot.message_handler(commands=["send_admin_request"])
def send_admin_request(message):
    try:
        user = session.query(User).filter(User.user_id == message.from_user.id).one()
        if user.admin_status == "Pending":
            bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –∑–∞–ø–∏—Ç, –æ—á—ñ–∫—É–π—Ç–µ –∑–≥–æ–¥–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞üò°")
        elif user.admin_status in ["Admin", "MAIN_ADMIN"]:
            bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–¥–º—ñ–Ω–∞!")
        else:
            user.admin_status = "Pending"
            session.commit()
            bot.send_message(message.chat.id,
                             "–ó–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ö–æ–ª–∏ –≥–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω —Ä–æ–∑–¥–∏–≤–∏—Ç—å—Å—è –≤–∞—à—É –∑–∞—è–≤–∫—É —Ç–∞ –ø–æ–≥–æ–¥–∏—Ç—å —ó—ó, –≤–∏ –∑–º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –∂–∞—Ä—Ç–∏.")
    except sqlalchemy.orm.exc.NoResultFound:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ –≤–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")


@bot.message_handler(commands=["show_admins"])
@for_main_admin
def show_admins(message):
    admins = session.query(User).filter(
        sqlalchemy.and_(User.admin_status.in_(["MAIN_ADMIN", "Admin"]), User.user_id != message.from_user.id)).all()
    if admins:
        for admin in admins:
            delete_admin_markup = types.InlineKeyboardMarkup(row_width=1)
            delete_admin_markup.add(
                types.InlineKeyboardButton("–ü–æ–∑–±–∞–≤–∏—Ç–∏ –∞–¥–º—ñ–Ω-–ø—Ä–∞–≤‚ùå", callback_data=f"delete_admin*{admin.user_id}"))
            bot.send_message(message.chat.id,
                             f"Id:{admin.user_id}; Name: {admin.full_name}; {'MAIN_ADMIN' if admin.admin_status == 'MAIN_ADMIN' else ''}",
                             reply_markup=delete_admin_markup)
    else:
        bot.send_message(message.chat.id, "–ê–¥–º—ñ–Ω—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—îüí§")


@bot.callback_query_handler(func=lambda call: "delete_admin*" in call.data)
def delete_admin(call):
    try:
        admin_to_delete = session.query(User).filter(User.user_id == int(call.data.split("*")[-1])).one()
        admin_to_delete.admin_status = "None"
        session.commit()
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,
                                      reply_markup=types.InlineKeyboardMarkup())
        bot.send_message(call.message.chat.id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {admin_to_delete.full_name} –ø–æ–∑–±–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω-–ø—Ä–∞–≤!")
    except sqlalchemy.exc.NoResultFound:
        bot.send_message(call.message.chat.id,
                         "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ –π–æ–≥–æ –ø—Ä–∏–π–Ω—è–≤ —É–∂–µ —ñ–Ω—à–∏–π –≥–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω?")


@bot.message_handler(commands=["show_requests"])
@for_main_admin
def show_requests(message):
    requests = session.query(User).filter(User.admin_status == "Pending").all()
    if requests:
        for user in requests:
            status_markup = types.InlineKeyboardMarkup(row_width=1)
            accept_button = types.InlineKeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–ø–∏—Ç‚úÖ",
                                                       callback_data=f"admin_request_accept*{user.user_id}")
            reject_button = types.InlineKeyboardButton("–í–¥—ñ–º–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç‚ùå",
                                                       callback_data=f"admin_request_reject*{user.user_id}")
            status_markup.add(accept_button, reject_button)
            bot.send_message(message.chat.id, f"Id:{user.user_id}; Name: {user.full_name}", reply_markup=status_markup)
    else:
        bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –∑–∞–ø–∏—Ç—ñ–≤ –Ω–µ–º–∞—îüí§")


@bot.callback_query_handler(func=lambda call: "admin_request_" in call.data)
def admin_request_callback(call):
    data = call.data.split("*")[0]
    try:
        user_to_change = session.query(User).filter(User.user_id == int(call.data.split("*")[-1])).one()
        if data == "admin_request_accept":
            user_to_change.admin_status = "Admin"
            bot.send_message(call.message.chat.id, f"–ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_to_change.full_name} –≤–∏–¥–∞–Ω–æ!")
        elif data == "admin_request_reject":
            user_to_change.admin_status = "None"
            bot.send_message(call.message.chat.id, f"–ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_to_change.full_name} –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ!")
        session.commit()
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,
                                      reply_markup=types.InlineKeyboardMarkup())
    except sqlalchemy.exc.NoResultFound:
        bot.send_message(call.message.chat.id,
                         "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ –π–æ–≥–æ –ø—Ä–∏–π–Ω—è–≤ —É–∂–µ —ñ–Ω—à–∏–π –≥–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω?")


@bot.message_handler(commands=["next_joke"])
def next_joke(message):
    if len(session.query(Joke).all()):
        joke = random.choices(session.query(Joke).all(),
                              cum_weights=[joke[0] for joke in session.query(Joke.joke_id).all()])[0]
        markup = types.InlineKeyboardMarkup(row_width=1)
        rate_button = types.InlineKeyboardButton("–û—Ü—ñ–Ω–∏—Ç–∏ –∂–∞—Ä—ÇüíØ", callback_data=f"rate_joke*{joke.joke_id}")
        if is_admin(message.from_user.id):
            edit_button = types.InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∂–∞—Ä—Çüõ†", callback_data=f"edit_joke*{joke.joke_id}")
            delete_button = types.InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –∂–∞—Ä—Ç‚ö∞", callback_data=f"delete_joke*{joke.joke_id}")
            markup.add(rate_button, edit_button, delete_button)
        else:
            markup.add(rate_button)
        bot.send_message(message.chat.id, f"–ñ–∞—Ä—Ç ‚Ññ{joke.joke_id}\n" + joke.content, reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         "–ù–∞ –∂–∞–ª—å –∂–∞—Ä—Ç—ñ–≤ –Ω–µ —ñ—Å–Ω—É—î, –π–¥–∏ –ø–æ–ø–ª–∞—á –∞–±–æ —Å–∫–∞–∂–∏ –∞–¥–º—ñ–Ω—É –Ω–µ—Ö–∞–π –¥–æ–¥–∞—Å—Ç—å –Ω–æ–≤–∏–π –∂–∞—Ä—Ç!")


@bot.callback_query_handler(func=lambda call: "_joke*" in call.data)
def change_joke(call):
    data = call.data.split("*")[0]
    try:
        joke_to_edit = session.query(Joke).filter(Joke.joke_id == int(call.data.split("*")[-1])).one()
        if data == "rate_joke":
            rate_markup = types.InlineKeyboardMarkup(row_width=2)
            rate_positive_button = types.InlineKeyboardButton("+1",
                                                              callback_data=f"rate_positive*{joke_to_edit.joke_id}")
            rate_negative_button = types.InlineKeyboardButton("-1",
                                                              callback_data=f"rate_negative*{joke_to_edit.joke_id}")
            rate_markup.add(rate_positive_button, rate_negative_button)
            bot.send_message(call.message.chat.id, "–û—Ü—ñ–Ω—ñ—Ç—å –∂–∞—Ä—Ç:", reply_markup=rate_markup)
        elif data == "edit_joke" and is_admin(call.message.chat.id):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ü—å–æ–≥–æ –∂–∞—Ä—Ç—É:")
            bot.register_next_step_handler(call.message, edit_content_joke, joke_to_edit)
        elif data == "delete_joke" and is_admin(call.message.chat.id):
            delete_joke(joke_to_edit)
            bot.send_message(call.message.chat.id, "–ñ–∞—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    except sqlalchemy.exc.NoResultFound:
        bot.send_message(call.message.chat.id,
                         "–ñ–∞—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ —Ç–∞–∫–∏–π –∂–∞—Ä—Ç –±—É–ª–æ —â–æ–π–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –í–∞–º–∏ –∞–±–æ —ñ–Ω—à–∏–º –∞–¥–º—ñ–Ω–æ–º?")


@bot.callback_query_handler(func=lambda call: "rate_" in call.data)
def rate_joke(call):
    data = call.data.split("*")[0]
    try:
        joke_to_rate = session.query(Joke).filter(Joke.joke_id == int(call.data.split("*")[-1])).one()
        if data == "rate_positive":
            joke_to_rate.rating += 1
        elif data == "rate_negative":
            joke_to_rate.rating -= 1
        session.commit()
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,
                                      reply_markup=types.InlineKeyboardMarkup())
        bot.send_message(call.message.chat.id, "–û—Ü—ñ–Ω–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!\n"
                                               "–ñ–∞—Ä—Ç–∏ –∑ –º–µ–Ω—à–Ω–æ—é –æ—Ü—ñ–Ω–∫–æ—é –±—É–¥—É—Ç—å –≤–∏–ø–∞–¥–∞—Ç–∏ –í–∞–º —Ä—ñ–¥—à–µ")
    except sqlalchemy.exc.NoResultFound:
        bot.send_message(call.message.chat.id,
                         "–ñ–∞—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ —Ç–∞–∫–∏–π –∂–∞—Ä—Ç –±—É–ª–æ —â–æ–π–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –í–∞–º–∏ –∞–±–æ —ñ–Ω—à–∏–º –∞–¥–º—ñ–Ω–æ–º?")


def edit_content_joke(message, joke_to_rate):
    joke_to_rate.content = message.text
    session.commit()
    bot.send_message(message.chat.id, "–ñ–∞—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!")


def delete_joke(joke_to_edit):
    session.delete(joke_to_edit)
    session.commit()


@bot.message_handler(commands=["add_joke"])
@for_admin
def add_joke(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∂–∞—Ä—Ç:")
    bot.register_next_step_handler(message, add_joke_to_db)


def add_joke_to_db(message):
    joke = Joke(content=message.text)
    session.add(joke)
    session.commit()

    bot.reply_to(message, "–ñ–∞—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")


bot.polling(none_stop=True)
